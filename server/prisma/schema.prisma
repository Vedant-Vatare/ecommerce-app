generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  full_name String?
  email     String        @unique
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  addresses UserAddress[]
  Admin     Admin[]
  UserCart  UserCart[]
  Order     Order[]
  Wishlist  Wishlist[]
}

model Admin {
  id        String   @id @default(uuid())
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserAddress {
  id        String   @id @default(uuid())
  name      String
  userId    String
  phone     String
  address   String
  city      String
  state     String
  country   String?
  pincode   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDefault Boolean? @default(false)
  Order     Order[]

  @@index([userId])
}

model Product {
  id              String            @id @default(uuid())
  name            String
  description     String?
  price           Float
  images          String[]
  stock           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserCart        UserCart[]
  OrderItem       OrderItem[]
  Wishlist        Wishlist[]
  ProductCategory ProductCategory[]

  @@index([name, description])
}

model Category {
  id                 String            @id @default(uuid())
  name               String            @unique
  slug               String            @unique
  description        String?
  image              String?
  totalProductsCount Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  ProductCategory    ProductCategory[]
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId, categoryId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model UserCart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  amount    Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
}

model Order {
  id                String        @id @default(uuid())
  transactionId     String        @unique
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  totalAmount       Float
  paymentStatus     PaymentStatus @default(pending)
  orderStatus       OrderStatus   @default(pending)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  shippingAddressId String
  shippingAddress   UserAddress   @relation(fields: [shippingAddressId], references: [id])

  @@index([userId])
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  cancelled
}
